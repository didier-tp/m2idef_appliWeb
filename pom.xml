<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.m2i.tp</groupId>
  <artifactId>appliWeb</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- UTF-8 = jeu de caracteres portable entre windows et linux -->
    <failOnMissingWebXml>false</failOnMissingWebXml>
    <!-- WEB-INF/web.xml est maintenant facultatif (version 3 des servlet) -->
  </properties>
 
 <dependencies>
	 <dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>javax.servlet-api</artifactId>
	    <version>3.1.0</version>
	    <scope>provided</scope> 
	    <!-- déjà fourni par tomcat au moment de l'execution 
	         il faut ce .jar au moment de la compilation -->
	    <!-- en scope=provided, servlet-api.jar n'est pas placé dans WEB-INF/lib -->
	</dependency>
	
	 <dependency>
	    <groupId>mysql</groupId>
	    <artifactId>mysql-connector-java</artifactId>
	    <version>8.0.13</version>
	    <!-- <scope>compile</scope> par defaut -->
	    <!-- en scope=compile ou runtime , mysql-connector.jar
	         est placé dans WEB-INF/lib du .war construit à deployer dans tomcat -->
	</dependency>
	
	<dependency> <!--  jstl = java standard tag library -->
	    <groupId>javax.servlet</groupId>
	    <artifactId>jstl</artifactId>
	    <version>1.2</version>
	</dependency>
	
  
  
	<dependency>
	    <groupId>log4j</groupId>
	    <artifactId>log4j</artifactId>
	    <version>1.2.17</version>
	</dependency>
	
	<dependency>
    	<groupId>com.fasterxml.jackson.core</groupId>
    	<artifactId>jackson-databind</artifactId>
    	<version>2.9.6</version>
	</dependency>
	
</dependencies>

<build>
   <finalName>${artifactId}</finalName> <!-- nom du jar ou war construit -->
   <!-- url de test : http://localhost:8080/appliWeb/index.html
        apres avoir recopier appliWeb.war de target vers tomcat8....\webapps -->
</build>
  
</project>